datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Restaurants {
  restaurant_id Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  food_category String    @db.VarChar(50)
  contact_number String   @db.VarChar(15)
  address_si     String   @db.VarChar(50)
  address_gu     String   @db.VarChar(50)
  address_dong   String   @db.VarChar(50)
  address_detail String   @db.VarChar(50)
  time_open      DateTime
  time_close     DateTime
  is_res_halal       Boolean
  is_res_vegan       Boolean
  menus          Menu[]
}

model Menu {
  menu_id       Int    @id
  restaurant_id Int
  name          String    @db.VarChar(100)
  photo_id      Int?
  price         Decimal    @db.Decimal(10, 2)
  is_res_halal       Boolean
  is_res_vegan       Boolean
  allergies_id  String    @db.Char(10)

  restaurant    Restaurants @relation(fields: [restaurant_id], references: [restaurant_id])
  photo         Photo?       @relation(fields: [photo_id], references: [photo_id])
  menuComponents Menu_Component[]

  @@index([restaurant_id])
}

model Photo {
  photo_id Int    @id @default(autoincrement())
  name     String @db.Text
  image    Bytes

  menus    Menu[]
}

model Menu_Component {
  menu_com_id Int @id @default(autoincrement())
  menu_id     Int
  component_id Int

  menu       Menu       @relation(fields: [menu_id], references: [menu_id])
  component  Components @relation(fields: [component_id], references: [component_id])

  @@index([menu_id])
  @@index([component_id])
}

model Components {
  component_id Int     @id @default(autoincrement())
  component    String  @db.VarChar(100)

  menuComponents Menu_Component[]
}

model User {
  user_id       Int     @id @default(autoincrement())
  username      String  @db.VarChar(50)
  email         String  @db.VarChar(100)
  password      String  @db.VarChar(255)
  location_lat  Decimal? @db.Decimal(9, 6)
  location_long Decimal? @db.Decimal(9, 6)
  kakaoId       Int?    @unique
}
